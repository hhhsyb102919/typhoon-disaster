import pandas as pd
import numpy as np
from pgmpy.models import BayesianNetwork
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination

# Step 1: Preprocessing the Data
data = """
日期时间,气压,风速,风向,波高
1810040700,1018.8,12.6,65,2.2
1810040730,1019.1,13.3,23,2.1
1810040800,1019.3,13.4,30,2.1
1810040830,1019.2,13.8,26,2.3
1810040900,1018.9,13.5,29,2.1
1810040930,1018.2,14,30,2.6
1810041000,1018.2,14.5,358,2.2
1810041030,1018.3,14.8,357,2.8
1810041100,1018,14,359,2.5
1810041130,1017.6,14.2,354,2.7
1810041200,1017.4,14.7,354,2.7
1810041230,1016.9,14.2,359,2.5
1810041300,1016.4,13.5,345,2.9
1810041330,1016.1,13.9,359,2.8
1810041400,1015.6,15.2,14,3.3
1810041430,1015.2,14.5,1,3.1
1810041500,1015.4,14.6,47,3.5
1810041530,1015.3,14.3,4,3.3
1810041600,1015.4,13,30,3.5
1810041630,1015.3,13.7,30,3.3
1810041700,1015.2,13.6,34,3
1810041730,1015.1,13.5,51,3.2
1810041800,1015.1,14.3,26,3.3
1810041830,1014.8,14.5,6,2.9
1810041900,1015.1,15.1,51,4
1810041930,1014.7,14.9,0,3.9
1810042000,1015.2,16.3,359,3.8
1810042030,1014.8,16.2,17,4.9
1810042100,1014.6,15.2,341,4.9
1810042130,1014.2,14.9,15,5.7
1810042200,1013.6,14.7,13,5.7
1810042230,1013.8,15.3,4,5.3
1810042300,1012.2,16,4,4.9
1810042330,1012.3,16.2,13,4.3
1810050000,1012.3,17.1,3,5.4
1810050030,1011.4,17.1,1,5.2
1810050100,1010.9,17.4,336,5.5
1810050130,1010.8,17.4,334,4.8
1810050200,1010.2,18.6,358,4.9
1810050230,1009.7,18.3,358,4.2
1810050300,1008.5,17.6,50,4.4
1810050330,1008.2,17.5,26,4.7
1810050400,1007.3,18.2,1,4.9
1810050430,1007.9,18.6,31,4.5
1810050500,1006.7,19.2,10,4.8
1810050530,1005.9,19.6,351,5.6
1810050600,1006.2,20.9,351,5.4
1810050630,1006.2,20.7,47,5.4
1810050700,1005.5,19.7,16,5.6
1810050730,1005.4,20.4,352,5.6
1810050800,1004.9,22.5,23,5.8
1810050830,1005.2,21.6,17,6.2
1810050900,1005.1,24.5,339,7
1810050930,1004.5,26,342,5.8
1810051000,1004.3,25.5,332,6.4
1810051030,1004,25.4,358,6.2
1810051100,1003.8,24.7,344,6.2
1810051130,1001.4,26.4,350,7.9
1810051200,1001.6,25.9,358,7.2
1810051230,1001.3,25.7,4,7.3
1810051300,999.8,27,353,8.5
1810051330,1000,29.2,327,8.1
1810051400,999.6,29.2,342,8.5
1810051430,998.9,29.5,299,8.8
1810051500,997.8,28.6,296,8.7
1810051530,998.1,27.3,272,9.7
1810051600,997.8,27.7,266,8.6
1810051630,1000.2,27.7,268,9.2
1810051700,999.5,27.4,335,8
1810051730,998.4,27.5,260,8.7
1810051800,998.3,25.8,328,9.7
1810051830,999,27.1,259,8.9
1810051900,999.1,26.1,281,11.2
1810051930,1000.7,24.1,280,9.2
1810052000,1001.2,23.8,277,9.3
1810052030,1001.7,24.8,273,8.4
1810052100,1002.5,25,285,8.7
1810052130,1002.6,25.2,262,8.5
1810052200,1003.6,26.2,259,7.4
1810052230,1003.6,25.6,236,6.8
1810052300,1005.1,25.9,239,7.8
1810052330,1004.5,25,250,6.7
1810060000,1005.5,25.6,238,7.5
1810060030,1005.7,23.7,275,6.5
1810060100,1006.5,24.1,255,6.4
1810060130,1007.2,24.1,287,6.2
1810060200,1007.5,22.8,259,6
1810060230,1007.9,22.4,254,6.1
1810060300,1007.9,21.1,267,6.5
1810060330,1007.9,20.8,266,5.4
1810060400,1008.6,20.5,244,6.5
1810060430,1009.2,19.3,273,4.9
1810060500,1009.9,19.2,269,6.3
1810060530,1010.6,19.1,260,7
1810060600,1010.8,17.8,281,6.9
1810060630,1011.5,16.8,276,6.7
1810060700,1011.9,17.8,300,7.1
1810060730,1012.6,16.9,261,4.7
1810060800,1013.8,15.7,272,5.5
1810060830,1013.9,16.5,307,5.2
1810060900,1014.4,15.4,264,4.6
1810060930,1014.4,14.9,259,4.1
1810061000,1014.6,15.5,261,4.3
1810061030,1014.4,14.9,257,3.8
1810061100,1014.4,15.1,275,3.8
1810061130,1014.6,14.2,268,4.7
1810061200,1014.4,14,247,3.4
1810061230,1014.4,13.5,273,4.4
1810061300,1014.6,12.8,285,4.6
1810061330,1014.6,13.4,276,3.8
1810061400,1014.9,13.1,287,3.5
1810061430,1014.9,13.8,314,4.3
1810061500,1015.6,14,307,4.3
1810061530,1015.7,14.2,319,4.1
1810061600,1015.2,13.5,293,4.4
1810061630,1015.2,12.6,298,4.7
1810061700,1016,13.1,316,4.3
1810061730,1016.3,12.9,316,4.7
1810061800,1015.9,11.9,351,4.1
1810061830,1016.2,10.7,287,3.6
1810061900,1016.4,10.3,309,2.8
1810061930,1016.7,9.5,312,3.5
1810062000,1017,9.4,325,3.4
1810062030,1017.2,8.3,298,2.8
1810062100,1017.5,7.2,319,2.9
1810062130,1017.6,7.5,313,3
1810062200,1017.7,7.7,313,3
1810062230,1017.8,7.5,323,2.8
1810062300,1017.9,8,326,2.8
1810062330,1017.9,8.4,316,2.7
1810070000,1018.2,8.7,319,3.4
1810070030,1018,9.4,332,2.6
1810070100,1018.1,9.6,320,2.6
"""

data = [line.split(",") for line in data.strip().split("\n")]
columns = data[0]
data = data[1:]

df = pd.DataFrame(data, columns=columns)
df['日期时间'] = pd.to_datetime(df['日期时间'], format='%y%m%d%H%M')
df[['气压', '风速', '风向', '波高']] = df[['气压', '风速', '风向', '波高']].astype(float)

# Step 2: Updating the CPDs
# Define the Bayesian Network structure
model = BayesianNetwork([
    ('HR', 'E'),
    ('HR', 'HAO'),
    ('E', 'HAO'),
    ('E', 'ERM'),
    ('ERM', 'C'),
    ('HAO', 'C')
])

# Define the CPDs (Conditional Probability Distributions)
# Placeholder CPDs
cpd_hr = TabularCPD(variable='HR', variable_card=4, values=[[0.25], [0.25], [0.25], [0.25]])
cpd_e = TabularCPD(variable='E', variable_card=2, 
                   values=[[0.8, 0.7, 0.6, 0.5], [0.2, 0.3, 0.4, 0.5]],
                   evidence=['HR'], evidence_card=[4])
cpd_hao = TabularCPD(variable='HAO', variable_card=3, 
                     values=[[0.3, 0.2, 0.1, 0.05, 0.4, 0.3, 0.2, 0.1],
                             [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4],
                             [0.3, 0.4, 0.5, 0.55, 0.2, 0.3, 0.4, 0.5]],
                     evidence=['HR', 'E'], evidence_card=[4, 2])
cpd_erm = TabularCPD(variable='ERM', variable_card=2, 
                     values=[[0.6, 0.4], [0.4, 0.6]],
                     evidence=['E'], evidence_card=[2])
cpd_c = TabularCPD(variable='C', variable_card=2, 
                   values=[[0.7, 0.6, 0.5, 0.4, 0.2, 0.1],
                           [0.3, 0.4, 0.5, 0.6, 0.8, 0.9]],
                   evidence=['ERM', 'HAO'], evidence_card=[2, 3])

# Add CPDs to the model
model.add_cpds(cpd_hr, cpd_e, cpd_hao, cpd_erm, cpd_c)

# Verify the model
model.check_model()

# Step 3: Inference
infer = VariableElimination(model)

# Example evidence
evidence = {
    'HR': 3,  # Red
    'E': 1,   # High Risk
    'HAO': 2, # High Risk
    'ERM': 1  # Yes
}

# Perform inference
query_result = infer.query(variables=['C'], evidence=evidence)
print(query_result)